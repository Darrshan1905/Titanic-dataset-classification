{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-06T07:41:41.713584Z","iopub.execute_input":"2024-05-06T07:41:41.714049Z","iopub.status.idle":"2024-05-06T07:41:41.724112Z","shell.execute_reply.started":"2024-05-06T07:41:41.713981Z","shell.execute_reply":"2024-05-06T07:41:41.722636Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.726655Z","iopub.execute_input":"2024-05-06T07:41:41.727059Z","iopub.status.idle":"2024-05-06T07:41:41.745399Z","shell.execute_reply.started":"2024-05-06T07:41:41.727025Z","shell.execute_reply":"2024-05-06T07:41:41.744124Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.747228Z","iopub.execute_input":"2024-05-06T07:41:41.748518Z","iopub.status.idle":"2024-05-06T07:41:41.784644Z","shell.execute_reply.started":"2024-05-06T07:41:41.748468Z","shell.execute_reply":"2024-05-06T07:41:41.783274Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.787490Z","iopub.execute_input":"2024-05-06T07:41:41.787893Z","iopub.status.idle":"2024-05-06T07:41:41.808339Z","shell.execute_reply.started":"2024-05-06T07:41:41.787862Z","shell.execute_reply":"2024-05-06T07:41:41.807204Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ntrain_data['Sex'] = train_data['Sex'].map({'male': 0, 'female': 1})\ntrain_data['Embarked'] = train_data['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ntrain_data['Age'].fillna(train_data['Age'].median(), inplace=True)\ntrain_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)\ntrain_data.dropna(inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.809720Z","iopub.execute_input":"2024-05-06T07:41:41.810207Z","iopub.status.idle":"2024-05-06T07:41:41.826909Z","shell.execute_reply.started":"2024-05-06T07:41:41.810173Z","shell.execute_reply":"2024-05-06T07:41:41.825522Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"test_data.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ntest_data['Sex'] = test_data['Sex'].map({'male': 0, 'female': 1})\ntest_data['Embarked'] = test_data['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ntest_data['Age'].fillna(test_data['Age'].median(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)\ntest_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.828527Z","iopub.execute_input":"2024-05-06T07:41:41.828916Z","iopub.status.idle":"2024-05-06T07:41:41.846660Z","shell.execute_reply.started":"2024-05-06T07:41:41.828883Z","shell.execute_reply":"2024-05-06T07:41:41.845542Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"X_train = train_data.drop('Survived', axis=1)\ny_train = train_data['Survived']","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.847911Z","iopub.execute_input":"2024-05-06T07:41:41.849046Z","iopub.status.idle":"2024-05-06T07:41:41.861393Z","shell.execute_reply.started":"2024-05-06T07:41:41.848963Z","shell.execute_reply":"2024-05-06T07:41:41.860105Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"X_test = test_data.drop('PassengerId', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.862847Z","iopub.execute_input":"2024-05-06T07:41:41.863716Z","iopub.status.idle":"2024-05-06T07:41:41.877383Z","shell.execute_reply.started":"2024-05-06T07:41:41.863677Z","shell.execute_reply":"2024-05-06T07:41:41.875900Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.879094Z","iopub.execute_input":"2024-05-06T07:41:41.879535Z","iopub.status.idle":"2024-05-06T07:41:41.901749Z","shell.execute_reply.started":"2024-05-06T07:41:41.879500Z","shell.execute_reply":"2024-05-06T07:41:41.900217Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"X_train_scaled","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.905806Z","iopub.execute_input":"2024-05-06T07:41:41.906605Z","iopub.status.idle":"2024-05-06T07:41:41.915367Z","shell.execute_reply.started":"2024-05-06T07:41:41.906564Z","shell.execute_reply":"2024-05-06T07:41:41.914126Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"array([[ 0.82737724, -0.73769513, -0.56573646, ..., -0.47367361,\n        -0.50244517,  0.58595414],\n       [-1.56610693,  1.35557354,  0.66386103, ..., -0.47367361,\n         0.78684529, -1.9423032 ],\n       [ 0.82737724,  1.35557354, -0.25833709, ..., -0.47367361,\n        -0.48885426,  0.58595414],\n       ...,\n       [ 0.82737724,  1.35557354, -0.1046374 , ...,  2.00893337,\n        -0.17626324,  0.58595414],\n       [-1.56610693, -0.73769513, -0.25833709, ..., -0.47367361,\n        -0.04438104, -1.9423032 ],\n       [ 0.82737724, -0.73769513,  0.20276197, ..., -0.47367361,\n        -0.49237783, -0.67817453]])"},"metadata":{}}]},{"cell_type":"code","source":"X_test_scaled","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.918471Z","iopub.execute_input":"2024-05-06T07:41:41.920413Z","iopub.status.idle":"2024-05-06T07:41:41.940415Z","shell.execute_reply.started":"2024-05-06T07:41:41.920322Z","shell.execute_reply":"2024-05-06T07:41:41.938630Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"array([[ 0.82737724, -0.73769513,  0.39488658, ..., -0.47367361,\n        -0.49078316, -0.67817453],\n       [ 0.82737724,  1.35557354,  1.35550962, ..., -0.47367361,\n        -0.50747884,  0.58595414],\n       [-0.36936484, -0.73769513,  2.50825727, ..., -0.47367361,\n        -0.45336687, -0.67817453],\n       ...,\n       [ 0.82737724, -0.73769513,  0.70228595, ..., -0.47367361,\n        -0.50244517,  0.58595414],\n       [ 0.82737724, -0.73769513, -0.18148724, ..., -0.47367361,\n        -0.48633742,  0.58595414],\n       [ 0.82737724, -0.73769513, -0.18148724, ...,  0.76762988,\n        -0.19824428, -1.9423032 ]])"},"metadata":{}}]},{"cell_type":"code","source":"X_train_split, X_val_split, y_train_split, y_val_split = train_test_split(X_train_scaled, y_train, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.942265Z","iopub.execute_input":"2024-05-06T07:41:41.943760Z","iopub.status.idle":"2024-05-06T07:41:41.952704Z","shell.execute_reply.started":"2024-05-06T07:41:41.943700Z","shell.execute_reply":"2024-05-06T07:41:41.951340Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"model = Sequential([\n    Dense(32, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n    Dense(16, activation='relu'),\n    Dense(1, activation='sigmoid')\n])","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:41.954649Z","iopub.execute_input":"2024-05-06T07:41:41.955546Z","iopub.status.idle":"2024-05-06T07:41:42.000787Z","shell.execute_reply.started":"2024-05-06T07:41:41.955488Z","shell.execute_reply":"2024-05-06T07:41:41.999072Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:42.002286Z","iopub.execute_input":"2024-05-06T07:41:42.003067Z","iopub.status.idle":"2024-05-06T07:41:42.017628Z","shell.execute_reply.started":"2024-05-06T07:41:42.003014Z","shell.execute_reply":"2024-05-06T07:41:42.016012Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\ncheckpoint_filepath = '/kaggle/working/best_model_weights.weights.h5'\n\nmodel_checkpoint_callback = ModelCheckpoint(\n    filepath=checkpoint_filepath,\n    save_weights_only=True,\n    monitor='val_accuracy',\n    mode='max',\n    save_best_only=True\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:41:42.019325Z","iopub.execute_input":"2024-05-06T07:41:42.019832Z","iopub.status.idle":"2024-05-06T07:41:42.033162Z","shell.execute_reply.started":"2024-05-06T07:41:42.019787Z","shell.execute_reply":"2024-05-06T07:41:42.031490Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"history = model.fit(X_train_split, y_train_split, epochs=1000, batch_size=32, validation_data=(X_val_split, y_val_split), callbacks=[early_stopping, model_checkpoint_callback])\n\nmodel.load_weights(checkpoint_filepath)\n\npred = model.predict(X_test_scaled)\nbinary_pred = (pred > 0.5).astype(int)\n\nsubmission_df = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': binary_pred.flatten()})\nsubmission_df.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:44:05.685637Z","iopub.execute_input":"2024-05-06T07:44:05.686188Z","iopub.status.idle":"2024-05-06T07:44:06.874422Z","shell.execute_reply.started":"2024-05-06T07:44:05.686150Z","shell.execute_reply":"2024-05-06T07:44:06.873111Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"Epoch 1/1000\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.8224 - loss: 0.4187 - val_accuracy: 0.8156 - val_loss: 0.4248\nEpoch 2/1000\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8239 - loss: 0.4222 - val_accuracy: 0.8156 - val_loss: 0.4225\nEpoch 3/1000\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8317 - loss: 0.4062 - val_accuracy: 0.8156 - val_loss: 0.4246\nEpoch 4/1000\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8371 - loss: 0.3835 - val_accuracy: 0.8156 - val_loss: 0.4246\nEpoch 5/1000\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8477 - loss: 0.3795 - val_accuracy: 0.8268 - val_loss: 0.4245\nEpoch 6/1000\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8421 - loss: 0.4026 - val_accuracy: 0.8156 - val_loss: 0.4285\nEpoch 7/1000\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8226 - loss: 0.4254 - val_accuracy: 0.8156 - val_loss: 0.4272\n\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step \n","output_type":"stream"}]},{"cell_type":"code","source":"submission_df","metadata":{"execution":{"iopub.status.busy":"2024-05-06T07:44:10.219874Z","iopub.execute_input":"2024-05-06T07:44:10.220895Z","iopub.status.idle":"2024-05-06T07:44:10.237234Z","shell.execute_reply.started":"2024-05-06T07:44:10.220843Z","shell.execute_reply":"2024-05-06T07:44:10.235673Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived\n0            892         0\n1            893         1\n2            894         0\n3            895         0\n4            896         0\n..           ...       ...\n413         1305         0\n414         1306         1\n415         1307         0\n416         1308         0\n417         1309         0\n\n[418 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 2 columns</p>\n</div>"},"metadata":{}}]}]}